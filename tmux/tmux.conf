set-option -g focus-events on
set-option -g default-terminal 'tmux-256color'
set-option -sg escape-time 10
set-option -g message-command-style fg='#cbbbce',bg='#000000'
set-option -g menu-selected-style fg='#242424',bg='#000000'
set-option -g mouse on
set-option -g monitor-activity on
set-option -g pane-border-lines simple
set-option -g pane-border-indicators both
set-option -g popup-border-lines simple
set-option -g pane-border-style fg='#181818'
set-option -g pane-active-border-style "#{?pane_in_mode,fg='#181818',#{?synchronize-panes,fg=#fc6551,fg=#030303}}"
set-option -g popup-style fg='#181818'
set-option -g main-pane-height "70%"
set-option -g main-pane-width "70%"
set-option -g other-pane-height "30%"
set-option -g other-pane-width "30%"
set-option -g mode-style fg='colour244',bg='colour234'
set-option -g pane-base-index 1
set-option -g status-keys emacs
set-option -g mode-keys vi
set-option -g repeat-time 300
set-option -g history-limit 500000
# set-option -sa terminal-features ',st-256color:RGB'
set-option -g cursor-style 'block'
set -ga terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'

# Set status bar
set-option -g status-style bg='colour234',fg='colour252'
set-option -g status-left "[#S] "
set-option -g status-right "[#H] %Y-%m-%d %I:%M:%S"
set -g status-justify centre
set -g base-index 1
set -ga update-environment TERM
set -ga update-environment TERM_PROGRAM
set -g allow-passthrough all

# Set key bindings
unbind-key C-b
bind-key -n C-a send-prefix
set-option -g prefix C-a
bind-key b set-option status
bind-key C-b set-option status

### Panes & window management
# Toggle full screen focus on active pane
bind-key C-\\ run-shell 'if tmux list-windows | grep -q tmux-zoom; then \
  tmux last-window; \
  tmux kill-window -t tmux-zoom; \
else \
  tmux resize-pane -Z; \
fi'

bind-key -n C-t run-shell 'if tmux list-windows | grep -q tmux-zoom; then \
  tmux last-window; \
  tmux kill-window -t tmux-zoom; \
else \
  tmux resize-pane -Z; \
fi'

bind-key -r C-Space next-layout
bind-key s split-window -v
bind-key v split-window -h

bind-key -n C-left resize-pane -L 5
bind-key -n C-down resize-pane -D 5
bind-key -n C-up resize-pane -U 5
bind-key -n C-right resize-pane -R 5

bind-key -r C-h resize-pane -L 3
bind-key -r C-j resize-pane -D 3
bind-key -r C-k resize-pane -U 3
bind-key -r C-l resize-pane -R 3

bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

bind-key C-x kill-pane
bind-key C-n next-window
bind-key C-p previous-window

# Enable clipboard integration in tmux
set -g set-clipboard external

# Define the copy-command using xclip
set -g copy-command 'xclip -selection clipboard'

bind-key escape copy-mode
bind-key p paste-buffer
bind-key = choose-buffer
bind-key + delete-buffer \; display-message "Current Tmux Clipboard History Cleared"
bind-key < run-shell "tmux set-buffer -- \"$(xsel -o -b)\"" \; display-message "Copy to Tmux Clipboard"
bind-key > run-shell "tmux show-buffer | xsel -i -b" \; display-message "Copy to System Clipboard"

# Key bindings in copy-mode-vi

# bind -T copy-mode-vi y                 send -X copy-pipe-and-cancel "xsel -b"
# bind -T copy-mode-vi Enter             send -X copy-pipe-and-cancel "xsel -b"
# bind -T copy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "xsel -b"

bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi V send-keys -X select-line
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T choice-mode-vi h send-keys -X tree-collapse
bind-key -T choice-mode-vi l send-keys -X tree-expand
bind-key -T choice-mode-vi H send-keys -X tree-collapse-all
bind-key -T choice-mode-vi L send-keys -X tree-expand-all
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -in -selection clipboard"
bind-key -T copy-mode-vi y send-keys -X copy-pipe "xclip -in -selection clipboard"

# run-shell "tmux set-environment -g TMUX_VERSION $(tmux -V | cut -c 6-)"
# if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' \
#  'bind-key -T copy-mode-vi v send-keys -X begin-selection ; \
#  bind-key -T copy-mode-vi V send-keys -X select-line ; \
#  bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle ; \
#  bind-key -T choice-mode-vi h send-keys -X tree-collapse ; \
#  bind-key -T choice-mode-vi l send-keys -X tree-expand ; \
#  bind-key -T choice-mode-vi H send-keys -X tree-collapse-all ; \
#  bind-key -T choice-mode-vi L send-keys -X tree-expand-all ; \
#  bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -in -selection clipboard" ; \
#  bind-key -T copy-mode-vi y send-keys -X copy-pipe "xclip -in -selection clipboard"'
#
# if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' \
#  'bind-key -t vi-copy v begin-selection ; \
#  bind-key -t vi-copy V select-line ; \
#  bind-key -t vi-copy C-v rectangle-toggle ; \
#  bind-key -t vi-choice h tree-collapse ; \
#  bind-key -t vi-choice l tree-expand ; \
#  bind-key -t vi-choice H tree-collapse-all ; \
#  bind-key -t vi-choice L tree-expand-all ; \
#  bind-key -t vi-copy MouseDragEnd1Pane copy-pipe "xclip -in -selection clipboard" ; \
#  bind-key -t vi-copy y copy-pipe "xclip -in -selection clipboard"'

# resolve target terminal to send escape sequence# if we are on remote machine, send directly to SSH_TTY to transport escape sequence# to terminal on local machine, so data lands in clipboard on our  local
# machinepane_active_tty=$(tmux list-panes -F "#{pane_active} #{pane_tty}" | awk '$1=="1" { print $2 }')target_tty="${SSH_TTY:-$pane_active_tty}"
# printf "$esc" > "$target_tty"

bind-key S command-prompt "new-window -n %1 'ssh %1'"
bind-key -n F1 command-prompt "split-window -h 'export MANWIDTH=$((\$(tput cols) - 8)); man %% | nvim -c \"set ft=man\" -'"
# bind-key -n F1 command-prompt "split-window -h 'man %% | nvim -c \"set ft=man\" -'"
bind-key ` capture-pane \; save-buffer /tmp/tmux-buffer \; delete-buffer \; display-popup -w 80% -h 60% -E "fzf-speed"
bind-key -r G run-shell "~/.local/bin/switch-back-to-nvim"

# Check if tmux is running in a TTY
if-shell "tty" \
 "set-option -ga terminal-overrides ',xterm-256color:Tc'" \
  "set-option -ga terminal-overrides ',xterm-256color:'"

if-shell "tty" \
  "set-option -g mode-style fg='colour252',bg='colour232'" \
    "set-option -g mode-style fg='black',bg='white'"

# https://github.com/3rd/image.nvim/?tab=readme-ov-file#tmux
# This is needed by the image.nvim plugin
set -gq allow-passthrough on
# This is related to the `tmux_show_only_in_active_window = true,` config in
# image.nvim
set -g visual-activity off
# NVIM=1 NVIM_LOG_FILE=1 yazi
# Set copy-mode highlight colors based on the terminal type
# if-shell "echo $TERM | grep -q 'screen'" \
#  "set-option -g status-bg colour235; set-option -g status-fg colour0" \
#  "set-option -g status-bg colour235; set-option -g status-fg colour0"

tmux_config="~/.config/tmux/tmux.conf"

bind-key r run-shell " \
	tmux source-file ${tmux_config} > /dev/null; \
	tmux display-message 'Sourced ${tmux_config}!'"

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'fcsonline/tmux-thumbs'
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'wfxr/tmux-fzf-url'
# set -g @plugin 'omerxx/tmux-sessionx'
# set -g @plugin 'omerxx/tmux-floax'
# set -g @sessionx-window-height '85%'
# set -g @sessionx-window-width '75%'
set -g @sessionx-zoxide-mode 'on'
# set -g @sessionx-custom-paths-subdirectories 'false'
# set -g @sessionx-filter-current 'false'
set -g @continuum-restore 'on'
set -g @resurrect-strategy-nvim 'session'
set -g @plugin 'tmux-plugins/tmux-sensible'
if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"
run '~/.tmux/plugins/tpm/tpm'

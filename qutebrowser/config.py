# Autogenerated config.py
#
# NOTE: config.py is intended for advanced users who are comfortable
# with manually migrating the config file on qutebrowser upgrades. If
# you prefer, you can also configure qutebrowser using the
# :set/:bind/:config-* commands without having to write a config.py
# file.
#
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Change the argument to True to still load settings configured via autoconfig.yml
config.load_autoconfig(False)

# Aliases for commands. The keys of the given dictionary are the
# aliases, while the values are the commands they map to.
# Type: Dict
c.aliases = {'GG': 'session-load GG', 'q': 'close', 'qa': 'quit', 'w': 'session-save', 'wconf': 'config-write-py --force', 'wq': 'quit --save', 'wqa': 'quit --save', 'load': 'session-load', 'src': 'config-source'}

# How to open links in an existing instance if a new one is launched.
# This happens when e.g. opening a link from a terminal. See
# `new_instance_open_target_window` to customize in which window the
# link is opened in.
# Type: String
# Valid values:
#   - tab: Open a new tab in the existing window and activate the window.
#   - tab-bg: Open a new background tab in the existing window and activate the window.
#   - tab-silent: Open a new tab in the existing window without activating the window.
#   - tab-bg-silent: Open a new background tab in the existing window without activating the window.
#   - window: Open in a new window.
#   - private-window: Open in a new private window.
c.new_instance_open_target = 'tab'

# Which window to choose when opening links as new tabs. When
# `new_instance_open_target` is set to `window`, this is ignored.
# Type: String
# Valid values:
#   - first-opened: Open new tabs in the first (oldest) opened window.
#   - last-opened: Open new tabs in the last (newest) opened window.
#   - last-focused: Open new tabs in the most recently focused window.
#   - last-visible: Open new tabs in the most recently visible window.
c.new_instance_open_target_window = 'first-opened'

# Turn on Qt HighDPI scaling. This is equivalent to setting
# QT_ENABLE_HIGHDPI_SCALING=1 (Qt >= 5.14) in the environment. It's off
# by default as it can cause issues with some bitmap fonts. As an
# alternative to this, it's possible to set font sizes and the
# `zoom.default` setting.
# Type: Bool
c.qt.highdpi = True

# Disable the Hangouts extension. The Hangouts extension provides
# additional APIs for Google domains only. Hangouts has been replaced
# with Meet, which appears to work without this extension. Note this
# setting gets ignored and the Hangouts extension is always disabled to
# avoid crashes on Qt 6.5.0 to 6.5.3 if dark mode is enabled, as well as
# on Qt 6.6.0.
# Type: Bool
c.qt.workarounds.disable_hangouts_extension = True

# Automatically start playing `<video>` elements.
# Type: Bool
c.content.autoplay = False

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
c.content.cookies.accept = 'no-3rdparty'

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'chrome-devtools://*')

# Which cookies to accept. With QtWebEngine, this setting also controls
# other features with tracking capabilities similar to those of cookies;
# including IndexedDB, DOM storage, filesystem API, service workers, and
# AppCache. Note that with QtWebKit, only `all` and `never` are
# supported as per-domain values. Setting `no-3rdparty` or `no-
# unknown-3rdparty` per-domain on QtWebKit will have the same effect as
# `all`. If this setting is used with URL patterns, the pattern gets
# applied to the origin/first party URL of the page making the request,
# not the request URL. With QtWebEngine 5.15.0+, paths will be stripped
# from URLs, so URL patterns using paths will not match. With
# QtWebEngine 5.15.2+, subdomains are additionally stripped as well, so
# you will typically need to set this setting for `example.com` when the
# cookie is set on `somesubdomain.example.com` for it to work properly.
# To debug issues with this setting, start qutebrowser with `--debug
# --logfilter network --debug-flag log-cookies` which will show all
# cookies being set.
# Type: String
# Valid values:
#   - all: Accept all cookies.
#   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
#   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
#   - never: Don't accept cookies at all.
config.set('content.cookies.accept', 'all', 'devtools://*')

# Allow websites to request geolocations.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.geolocation', True, 'https://www.google.com')

# Allow websites to request geolocations.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.geolocation', False, 'https://www.qub.ca')

# Allow websites to request geolocations.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.geolocation', False, 'https://www.tuango.ca')

# Value to send in the `Accept-Language` header. Note that the value
# read from JavaScript is always the global value.
# Type: String
config.set('content.headers.accept_language', '', 'https://matchmaker.krunker.io/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99 Safari/537.36', 'https://*.slack.com/*')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}) AppleWebKit/{webkit_version} (KHTML, like Gecko) {upstream_browser_key}/{upstream_browser_version} Safari/{webkit_version}', 'https://web.whatsapp.com/')

# User agent to send.  The following placeholders are defined:  *
# `{os_info}`: Something like "X11; Linux x86_64". * `{webkit_version}`:
# The underlying WebKit version (set to a fixed value   with
# QtWebEngine). * `{qt_key}`: "Qt" for QtWebKit, "QtWebEngine" for
# QtWebEngine. * `{qt_version}`: The underlying Qt version. *
# `{upstream_browser_key}`: "Version" for QtWebKit, "Chrome" for
# QtWebEngine. * `{upstream_browser_version}`: The corresponding
# Safari/Chrome version. * `{qutebrowser_version}`: The currently
# running qutebrowser version.  The default value is equal to the
# unchanged user agent of QtWebKit/QtWebEngine.  Note that the value
# read from JavaScript is always the global value. With QtWebEngine
# between 5.12 and 5.14 (inclusive), changing the value exposed to
# JavaScript requires a restart.
# Type: FormatString
config.set('content.headers.user_agent', 'Mozilla/5.0 ({os_info}; rv:133.0) Gecko/20100101 Firefox/133.0', 'https://accounts.google.com/*')

# Enable the ad/host blocker
# Type: Bool
c.content.blocking.enabled = True

# List of URLs to host blocklists for the host blocker.  Only used when
# the simple host-blocker is used (see `content.blocking.method`).  The
# file can be in one of the following formats:  - An `/etc/hosts`-like
# file - One host per line - A zip-file of any of the above, with either
# only one file, or a file   named `hosts` (with any extension).  It's
# also possible to add a local file or directory via a `file://` URL. In
# case of a directory, all files in the directory are read as adblock
# lists.  The file `~/.config/qutebrowser/blocked-hosts` is always read
# if it exists.
# Type: List of Url
c.content.blocking.hosts.lists = ['https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts']

# Block subdomains of blocked hosts. Note: If only a single subdomain is
# blocked but should be allowed, consider using
# `content.blocking.whitelist` instead.
# Type: Bool
c.content.blocking.hosts.block_subdomains = True

# Which method of blocking ads should be used.  Support for Adblock Plus
# (ABP) syntax blocklists using Brave's Rust library requires the
# `adblock` Python package to be installed, which is an optional
# dependency of qutebrowser. It is required when either `adblock` or
# `both` are selected.
# Type: String
# Valid values:
#   - auto: Use Brave's ABP-style adblocker if available, host blocking otherwise
#   - adblock: Use Brave's ABP-style adblocker
#   - hosts: Use hosts blocking
#   - both: Use both hosts blocking and Brave's ABP-style adblocker
c.content.blocking.method = 'auto'

# List of URLs to ABP-style adblocking rulesets.  Only used when Brave's
# ABP-style adblocker is used (see `content.blocking.method`).  You can
# find an overview of available lists here:
# https://adblockplus.org/en/subscriptions - note that the special
# `subscribe.adblockplus.org` links aren't handled by qutebrowser, you
# will instead need to find the link to the raw `.txt` file (e.g. by
# extracting it from the `location` parameter of the subscribe URL and
# URL-decoding it).
# Type: List of Url
c.content.blocking.adblock.lists = ['https://easylist.to/easylist/easylist.txt', 'https://easylist.to/easylist/easyprivacy.txt', 'https://raw.githubusercontent.com/CrusheerPL/AlleBlockV2/master/AlleBlockV2.txt']

# A list of patterns that should always be loaded, despite being blocked
# by the ad-/host-blocker. Local domains are always exempt from
# adblocking. Note this whitelists otherwise blocked requests, not
# first-party URLs. As an example, if `example.org` loads an ad from
# `ads.example.org`, the whitelist entry could be
# `https://ads.example.org/*`. If you want to disable the adblocker on a
# given page, use the `content.blocking.enabled` setting with a URL
# pattern instead.
# Type: List of UrlPattern
c.content.blocking.whitelist = []

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'chrome-devtools://*')

# Load images automatically in web pages.
# Type: Bool
config.set('content.images', True, 'devtools://*')

# Allow JavaScript to read from or write to the clipboard. With
# QtWebEngine, writing the clipboard as response to a user interaction
# is always allowed. On Qt < 6.8, the `ask` setting is equivalent to
# `none` and permission needs to be granted manually via this setting.
# Type: JSClipboardPermission
# Valid values:
#   - none: Disable access to clipboard.
#   - access: Allow reading from and writing to the clipboard.
#   - access-paste: Allow accessing the clipboard and pasting clipboard content.
#   - ask: Prompt when requested (grants 'access-paste' permission).
c.content.javascript.clipboard = 'access'

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome-devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'devtools://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Allow locally loaded documents to access remote URLs.
# Type: Bool
config.set('content.local_content_can_access_remote_urls', True, 'file:///home/cf/.local/share/qutebrowser/userscripts/*')
config.set('content.local_content_can_access_remote_urls', True, 'file:///home/cf/Templates/html/startpage/*')

# Allow locally loaded documents to access other local URLs.
# Type: Bool
config.set('content.local_content_can_access_file_urls', True, 'file:///home/cf/.local/share/qutebrowser/userscripts/*')
config.set('content.local_content_can_access_file_urls', True, 'file:///home/cf/Templates/html/startpage/*')
# Allow websites to record audio.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.media.audio_capture', True, 'https://www.messenger.com/*')

# Allow websites to record audio.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.media.audio_capture', True, 'https://www.messenger.com/*/*')

# Allow websites to record audio.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.media.audio_capture', True, 'https://www.facebook.com/*')

# Allow websites to record audio.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.media.audio_capture', True, 'https://teams.microsoft.com/*')

# Allow websites to record audio and video.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.media.audio_video_capture', True, 'https://teams.microsoft.com')

# Allow websites to record audio and video.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
c.content.media.audio_video_capture = True

# Allow websites to record video.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.media.video_capture', True, 'https://www.messenger.com')

# Allow websites to record video.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.media.video_capture', True, 'https://www.messenger.com/*/*')

# Allow websites to record video.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.media.video_capture', True, 'https://www.facebook.com')

# Allow websites to record video.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.media.video_capture', True, 'https://teams.microsoft.com')

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.notifications.enabled', True, 'https://www.facebook.com')

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.notifications.enabled', True, 'https://www.netflix.com')

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.notifications.enabled', True, 'https://www.reddit.com')

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.notifications.enabled', True, 'https://teams.live.com')

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.notifications.enabled', True, 'https://teams.microsoft.com')

# Allow websites to show notifications.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.notifications.enabled', False, 'https://www.tiktok.com')

# What notification presenter to use for web notifications. Note that
# not all implementations support all features of notifications: - The
# `qt` and `systray` options only support showing one notification at
# the time   and ignore the `tag` option to replace existing
# notifications. - The `herbe` option only supports showing one
# notification at the time and doesn't   show icons. - The `messages`
# option doesn't show icons and doesn't support the `click` and
# `close` events.
# Type: String
# Valid values:
#   - auto: Tries `libnotify`, `systray` and `messages`, uses the first one available without showing error messages.
#   - qt: Use Qt's native notification presenter, based on a system tray icon. Switching from or to this value requires a restart of qutebrowser.
#   - libnotify: Shows messages via DBus in a libnotify-compatible way. If DBus isn't available, falls back to `systray` or `messages`, but shows an error message.
#   - systray: Use a notification presenter based on a systray icon. Falls back to `libnotify` or `messages` if not systray is available. This is a reimplementation of the `qt` setting value, but with the possibility to switch to it at runtime.
#   - messages: Show notifications as qutebrowser messages. Most notification features aren't available.
#   - herbe: (experimental!) Show notifications using herbe (github.com/dudik/herbe). Most notification features aren't available.
c.content.notifications.presenter = 'libnotify'

# Allow websites to register protocol handlers via
# `navigator.registerProtocolHandler`.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.register_protocol_handler', True, 'https://mail.google.com?extsrc=mailto&url=%25s')

# Allow websites to register protocol handlers via
# `navigator.registerProtocolHandler`.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.register_protocol_handler', True, 'https://outlook.office.com?mailtouri=%25s')

# Allow websites to register protocol handlers via
# `navigator.registerProtocolHandler`.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.register_protocol_handler', True, 'https://outlook.live.com?mailtouri=%25s')

# Allow websites to register protocol handlers via
# `navigator.registerProtocolHandler`.
# Type: BoolAsk
# Valid values:
#   - true
#   - false
#   - ask
config.set('content.register_protocol_handler', False, 'https://mail.proton.me#mailto=%25s')

# List of user stylesheet filenames to use.
# Type: List of File, or File
c.content.user_stylesheets = ['~/Templates/css/root_sensible.css']

# Shrink the completion to be smaller than the configured size if there
# are no scrollbars.
# Type: Bool
c.completion.shrink = True

# Width (in pixels) of the scrollbar in the completion window.
# Type: Int
c.completion.scrollbar.width = 0

# Prompt the user for the download location. If set to false,
# `downloads.location.directory` will be used.
# Type: Bool
c.downloads.location.prompt = True

# Where to show the downloaded files.
# Type: VerticalPosition
# Valid values:
#   - top
#   - bottom
c.downloads.position = 'bottom'

# Duration (in milliseconds) to wait before removing finished downloads.
# If set to -1, downloads are never removed.
# Type: Int
c.downloads.remove_finished = 3000

# Editor (and arguments) to use for the `edit-*` commands. The following
# placeholders are defined:  * `{file}`: Filename of the file to be
# edited. * `{line}`: Line in which the caret is found in the text. *
# `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand
c.editor.command = ['emacsclient', '-c', '--socket-name=/run/user/1000/emacs/server', '+{line}:{column}', '{file}', '-f', 'delete-other-windows']

# CSS border value for hints.
# Type: String
c.hints.border = '1px #0D0D0D #cccccc'

# When/how to show the scrollbar.
# Type: String
# Valid values:
#   - always: Always show the scrollbar.
#   - never: Never show the scrollbar.
#   - when-searching: Show the scrollbar when searching for text in the webpage. With the QtWebKit backend, this is equal to `never`.
#   - overlay: Show an overlay scrollbar. On macOS, this is unavailable and equal to `when-searching`; with the QtWebKit backend, this is equal to `never`. Enabling/disabling overlay scrollbars requires a restart.
c.scrolling.bar = 'overlay'

# Enable smooth scrolling for web pages. Note smooth scrolling does not
# work with the `:scroll-px` command.
# Type: Bool
c.scrolling.smooth = True

# When to show the statusbar.
# Type: String
# Valid values:
#   - always: Always show the statusbar.
#   - never: Always hide the statusbar.
#   - in-mode: Show the statusbar when in modes other than normal mode.
c.statusbar.show = 'never'

# Position of the status bar.
# Type: VerticalPosition
# Valid values:
#   - top
#   - bottom
c.statusbar.position = 'top'

# When to show the tab bar.
# Type: String
# Valid values:
#   - always: Always show the tab bar.
#   - never: Always hide the tab bar.
#   - multiple: Hide the tab bar if only one tab is open.
#   - switching: Show the tab bar when switching tabs.
c.tabs.show = 'switching'

# Duration (in milliseconds) to show the tab bar before hiding it when
# tabs.show is set to 'switching'.
# Type: Int
c.tabs.show_switching_delay = 10000

# Page to open if :open -t/-b/-w is used without URL. Use `about:blank`
# for a blank page.
# Type: FuzzyUrl
c.url.default_page = 'file:///home/cf/Templates/html/startpage/startpage.html'

# Search engines which can be used via the address bar.  Maps a search
# engine name (such as `DEFAULT`, or `ddg`) to a URL with a `{}`
# placeholder. The placeholder will be replaced by the search term, use
# `{{` and `}}` for literal `{`/`}` braces.  The following further
# placeholds are defined to configure how special characters in the
# search terms are replaced by safe characters (called 'quoting'):  *
# `{}` and `{semiquoted}` quote everything except slashes; this is the
# most   sensible choice for almost all search engines (for the search
# term   `slash/and&amp` this placeholder expands to `slash/and%26amp`).
# * `{quoted}` quotes all characters (for `slash/and&amp` this
# placeholder   expands to `slash%2Fand%26amp`). * `{unquoted}` quotes
# nothing (for `slash/and&amp` this placeholder   expands to
# `slash/and&amp`). * `{0}` means the same as `{}`, but can be used
# multiple times.  The search engine named `DEFAULT` is used when
# `url.auto_search` is turned on and something else than a URL was
# entered to be opened. Other search engines can be used by prepending
# the search engine name to the search term, e.g. `:open google
# qutebrowser`.
# Type: Dict
c.url.searchengines = {'DEFAULT': 'https://duckduckgo.com/?q={}', 'stract': 'https://stract.com/search?ss=false&sr=N4IgNglg1gpgJiAXAbQLoBoRwgZ0rBFDEAIzAHsBjApNAXyA&q={}&optic=&gl=All'}

# Page(s) to open at the start.
# Type: List of FuzzyUrl, or FuzzyUrl
c.url.start_pages = 'file:///home/cf/Templates/html/startpage/startpage.html'

# Set the main window background to transparent.  This allows having a
# transparent tab- or statusbar (might require a compositor such as
# picom). However, it breaks some functionality such as dmenu embedding
# via its `-w` option. On some systems, it was additionally reported
# that main window transparency negatively affects performance.  Note
# this setting only affects windows opened after setting it.
# Type: Bool
c.window.transparent = False

# Default zoom level.
# Type: Perc
c.zoom.default = '100%'

# Available zoom levels.
# Type: List of Perc
c.zoom.levels = ['25%', '30%', '35%', '40%', '45%', '50%', '55%', '60%', '65%', '70%', '75%', '80%', '85%', '90%', '95%', '100%', '105%', '110%', '115%', '120%', '125%', '130%', '135%', '140%', '145%', '150%', '155%', '160%', '165%', '170%', '175%', '180%', '185%', '190%', '195%', '200%', '205%', '210%', '215%', '220%', '225%', '230%', '235%', '240%', '245%', '250%', '255%', '260%', '265%', '270%', '275%', '280%', '285%', '290%', '295%', '300%', '305%', '310%', '315%', '320%', '325%', '330%', '335%', '340%', '345%', '350%', '355%', '360%', '365%', '370%', '375%', '380%', '385%', '390%', '395%', '400%', '405%', '410%', '415%', '420%', '425%', '430%', '435%', '440%', '445%', '450%', '455%', '460%', '465%', '470%', '475%', '480%', '485%', '490%', '495%', '500%']

# Text color of the completion widget. May be a single color to use for
# all columns or a list of three colors, one for each column.
# Type: List of QtColor, or QtColor
c.colors.completion.fg = '#424242'

# Background color of the completion widget for odd rows.
# Type: QssColor
c.colors.completion.odd.bg = '#020202'

# Background color of the completion widget for even rows.
# Type: QssColor
c.colors.completion.even.bg = '#010101'

# Background color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.bg = '#020202'

# Bottom border color of the completion widget category headers.
# Type: QssColor
c.colors.completion.category.border.bottom = '#010101'

# Foreground color of the selected completion item.
# Type: QtColor
c.colors.completion.item.selected.fg = '#cfcfcf'

# Background color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.bg = '#111111'

# Top border color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.border.top = '#111111'

# Bottom border color of the selected completion item.
# Type: QssColor
c.colors.completion.item.selected.border.bottom = '#cfcfcf'

# Foreground color of the matched text in the selected completion item.
# Type: QtColor
c.colors.completion.item.selected.match.fg = '#ffffff'

# Foreground color of the matched text in the completion.
# Type: QtColor
c.colors.completion.match.fg = '#ffffff'

# Color of the scrollbar handle in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.fg = '#000000'

# Color of the scrollbar in the completion view.
# Type: QssColor
c.colors.completion.scrollbar.bg = '#111111'

# Color gradient interpolation system for download backgrounds.
# Type: ColorSystem
# Valid values:
#   - rgb: Interpolate in the RGB color system.
#   - hsv: Interpolate in the HSV color system.
#   - hsl: Interpolate in the HSL color system.
#   - none: Don't show a gradient.
c.colors.downloads.system.bg = 'hsl'

# Font color for hints.
# Type: QssColor
c.colors.hints.fg = 'white'

# Background color for hints. Note that you can use a `rgba(...)` value
# for transparency.
# Type: QssColor
c.colors.hints.bg = 'qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 rgba(0, 0, 0, 0.4), stop:1 rgba(0, 0, 0, 0.9))'

# Font color for the matched part of hints.
# Type: QtColor
c.colors.hints.match.fg = '#cbba92'

# Background color of the statusbar.
# Type: QssColor
c.colors.statusbar.normal.bg = '#00020b'

# Foreground color of the statusbar in passthrough mode.
# Type: QssColor
c.colors.statusbar.passthrough.fg = '#4c1e48'

# Background color of the statusbar in passthrough mode.
# Type: QssColor
c.colors.statusbar.passthrough.bg = '#190618'

# Background color of the tab bar.
# Type: QssColor
c.colors.tabs.bar.bg = '#111111'

# Background color of unselected odd tabs.
# Type: QtColor
c.colors.tabs.odd.bg = '#121212'

# Background color of unselected even tabs.
# Type: QtColor
c.colors.tabs.even.bg = '#121212'

# Background color for webpages if unset (or empty to use the theme's
# color).
# Type: QtColor
c.colors.webpage.bg = '#00020b'

# Value to use for `prefers-color-scheme:` for websites. The "light"
# value is only available with QtWebEngine 5.15.2+. On older versions,
# it is the same as "auto". The "auto" value is broken on QtWebEngine
# 5.15.2 due to a Qt bug. There, it will fall back to "light"
# unconditionally.
# Type: String
# Valid values:
#   - auto: Use the system-wide color scheme setting.
#   - light: Force a light theme.
#   - dark: Force a dark theme.
c.colors.webpage.preferred_color_scheme = 'dark'

# Render all web contents using a dark theme. On QtWebEngine < 6.7, this
# setting requires a restart and does not support URL patterns, only the
# global setting is applied. Example configurations from Chromium's
# `chrome://flags`: - "With simple HSL/CIELAB/RGB-based inversion": Set
# `colors.webpage.darkmode.algorithm` accordingly, and   set
# `colors.webpage.darkmode.policy.images` to `never`.  - "With selective
# image inversion": qutebrowser default settings.
# Type: Bool
c.colors.webpage.darkmode.enabled = True

# Which images to apply dark mode to.
# Type: String
# Valid values:
#   - always: Apply dark mode filter to all images.
#   - never: Never apply dark mode filter to any images.
#   - smart: Apply dark mode based on image content. Not available with Qt 5.15.0.
#   - smart-simple: On QtWebEngine 6.6, use a simpler algorithm for smart mode (based on numbers of colors and transparency), rather than an ML-based model. Same as 'smart' on older QtWebEnigne versions.
c.colors.webpage.darkmode.policy.images = 'never'

# Which pages to apply dark mode to. The underlying Chromium setting has
# been removed in QtWebEngine 5.15.3, thus this setting is ignored
# there. Instead, every element is now classified individually.
# Type: String
# Valid values:
#   - always: Apply dark mode filter to all frames, regardless of content.
#   - smart: Apply dark mode filter to frames based on background color.
c.colors.webpage.darkmode.policy.page = 'always'

# Default font families to use. Whenever "default_family" is used in a
# font setting, it's replaced with the fonts listed here. If set to an
# empty value, a system-specific monospace default is used.
# Type: List of Font, or Font
c.fonts.default_family = 'Iosevka Nerd Font'

# Default font size to use. Whenever "default_size" is used in a font
# setting, it's replaced with the size listed here. Valid values are
# either a float value with a "pt" suffix, or an integer value with a
# "px" suffix.
# Type: String
c.fonts.default_size = '12pt'

# Font used for tooltips. If set to null, the Qt default is used.
# Type: Font
c.fonts.tooltip = 'Iosevka Nerd Font'

# Font used for the context menu. If set to null, the Qt default is
# used.
# Type: Font
c.fonts.contextmenu = 'Iosevka Nerd Font'

# Font family for standard fonts.
# Type: FontFamily
c.fonts.web.family.standard = 'Iosevka Nerd Font'

# Font family for fixed fonts.
# Type: FontFamily
c.fonts.web.family.fixed = 'Iosevka Nerd Font Propo'

# Font family for serif fonts.
# Type: FontFamily
c.fonts.web.family.serif = 'CaskaydiaCove Nerd Font Propo'

# Font family for sans-serif fonts.
# Type: FontFamily
c.fonts.web.family.sans_serif = 'CaskaydiaCove Nerd Font'

# Font family for cursive fonts.
# Type: FontFamily
c.fonts.web.family.cursive = 'Iosevka Nerd Font Propo'

# Font family for fantasy fonts.
# Type: FontFamily
c.fonts.web.family.fantasy = 'Fantasque Sans MNerd Font Propo'

# Default font size (in pixels) for regular text.
# Type: Int
c.fonts.web.size.default = 20

# Default font size (in pixels) for fixed-pitch text.
# Type: Int
c.fonts.web.size.default_fixed = 12

# Hard minimum font size (in pixels).
# Type: Int
c.fonts.web.size.minimum = 12

# Bindings for normal mode
config.bind(',,', 'jseval --quiet --file ~/.config/qutebrowser/userscripts/toggle_visibility.js')
config.bind(',B', ':set statusbar.show never')
config.bind(',D', 'set downloads.location.prompt false')
config.bind(',M', 'hint links spawn --detach mpv {hint-url}')
config.bind(',R', ':spawn --detach st -e readit -c -l en')
config.bind(',U', 'hint links spawn umpv {hint-url}')
config.bind(',b', ':set statusbar.show in-mode')
config.bind(',d', 'set downloads.location.prompt true')
config.bind(',l', 'spawn ytcl {url};;cmd-later 100 spawn ytln {url}')
config.bind(',m', 'spawn --detach mpv {url}')
config.bind(',rf', 'spawn --detach st -e readit -c -l fr && xdotool key alt+h key h;;')
config.bind(',rs', 'hint --rapid links spawn rssadd {hint-url}')
config.bind(',ta', 'cmd-set-text -s :spawn --userscript taskadd')
config.bind(',th', ':spawn --userscript taskadd due:eod pri:H')
config.bind(',tt', 'fake-key <Ctrl+c>;;yank selection;;spawn tts "$(xclip -selection clipboard -o)"')
config.bind(',uM', 'hint --rapid links spawn umpv {hint-url}')
config.bind(',um', 'spawn umpv {url}')
config.bind(',yd', 'spawn ydl {url}')
config.bind(',yt', 'spawn --detach mpv {url}')
config.bind(',yu', 'hint links spawn --detach ydl {hint-url}')
config.bind('0', 'hint links userscript append_hint_url')
config.bind('1', 'zoom 100%')
config.bind('2', 'zoom 200%')
config.bind('3', 'zoom 150%')
config.bind('4', 'zoom 120%')
config.bind('5', 'zoom 80%')
config.bind('6', 'quickmark-load qai')
config.bind('7', 'hint --rapid links spawn ydl {hint-url}')
config.bind('8', 'spawn ydl {url}')
config.bind('9', 'hint links spawn ydl {hint-url}')
config.bind(';D', 'hint --rapid links spawn ydl {hint-url}')
config.bind(';M', 'hint links spawn mpv {hint-url}')
config.bind(';N', 'hint --rapid links spawn mpv {hint-url}')
config.bind(';l', 'hint links spawn ytln {hint-url}')
config.bind('<?', 'set content.user_stylesheets ""')
config.bind('<Alt+Shift+j>', 'zoom-out')
config.bind('<Alt+Shift+k>', 'zoom-in')
config.bind('<Alt+c>', ':yank selection')
config.bind('<Alt+v>', ':fake-key <ctrl+v>')
config.bind('<Backspace>', 'fake-key <Backspace>')
config.bind('<Ctrl+->', 'zoom-out')
config.bind('<Ctrl+=>', 'zoom-in')
config.bind('<Ctrl+a>', 'mode-enter insert;;fake-key <Ctrl+a>;;fake-key <Ctrl+c>;;mode-leave')
config.bind('<Ctrl+i>', 'fake-key <Tab>')
config.bind('<Ctrl+Alt+i>', 'fake-key <Backtab>')
config.bind('<Ctrl+c>', 'fake-key <Ctrl+c>')
config.bind('<Ctrl+d>', 'scroll-page 0 0.8')
config.bind('<Ctrl+Alt+Shift+e>', 'config-edit')
config.bind('<Ctrl+e>', 'mode-enter insert;;fake-key <End>')
config.bind('<Ctrl+u>', 'scroll-page 0 -0.8')
config.bind('<Ctrl+z>', 'fake-key <Ctrl+z>')
config.bind('<Enter>', 'fake-key <Enter>')
config.bind('<Space>', 'scroll-page 0 0.6')
config.bind('>?', 'set content.user_stylesheets \'["~/Templates/css/root_sensible.css", "~/Templates/css/cgpt.css"]\'')
config.bind('EE', 'fake-key <ctrl+c>;;yank selection;;spawn sleep 0.3;;spawn --detach st -e vimclip')
config.bind('TT', 'tab-only')
config.bind('UU', 'edit-text {url}')
config.bind('WE', 'spawn wikilocale {url} ;; cmd-later 500 open {clipboard}')
config.bind('Y', 'fake-key <ctrl+c>;;yank selection')
config.bind('d', 'scroll-page 0 0.4')
config.bind('u', 'scroll-page 0 -0.4')
config.bind('<Ctrl+n>', 'fake-key <down>')
config.bind('<Ctrl+p>', 'fake-key <up>')
config.bind('n', 'fake-key <down>')
config.bind('p', 'fake-key <up>')
config.bind('N', 'next-page')
config.bind('P', 'previous-page')
config.bind('gT', 'cmd-set-text :tab-give 1')
config.bind('td', 'jseval --quiet --file ~/.config/qutebrowser/userscripts/mkdragelm.js')
config.bind('tt', 'fake-key <Ctrl+c>;;yank selection;;spawn tts "$(xclip -selection clipboard -o)"')

# Bindings for caret mode
config.bind('EE', 'fake-key <ctrl+c>;;yank selection;;spawn sleep 0.3;;spawn --detach st -e vimclip', mode='caret')
config.bind('d', 'scroll-page 0 0.4', mode='caret')
config.bind('j', 'move-to-next-line;;scroll-page 0 0.01', mode='caret')
config.bind('k', 'move-to-prev-line;;scroll-page 0 -0.01', mode='caret')
config.bind('tt', 'fake-key <ctrl+c>;;yank selection;;spawn tts "$(xclip -selection clipboard -o)" ', mode='caret')
config.bind('<Ctrl+a>', 'fake-key <Home>', mode='caret')
config.bind('<Ctrl+e>', 'fake-key <End>', mode='caret')
config.bind('<Ctrl+f>', 'fake-key <Right>', mode='caret')
config.bind('<Ctrl+b>', 'fake-key <Left>', mode='caret')
config.bind('<Ctrl+w>', 'fake-key <Ctrl+x>', mode='caret')
config.bind('<Ctrl+d>', 'fake-key <Delete>', mode='caret')
config.bind('<Alt+w>', 'fake-key <Ctrl+c>', mode='caret')
config.bind('<Alt+a>', 'fake-key <Ctrl+Home>', mode='caret')
config.bind('<Alt+f>', 'fake-key <Ctrl+Right>', mode='caret')
config.bind('<Alt+b>', 'fake-key <Ctrl+Left>', mode='caret')
config.bind('<Alt+e>', 'fake-key <Ctrl+End>', mode='caret')
config.bind('<Alt+d>', 'fake-key <Ctrl+Right>;;fake-key <Ctrl+Left>;;fake-key <Ctrl+x>', mode='caret')

config.bind('tt', 'fake-key <ctrl+c>;;yank selection;;spawn tts "$(xclip -selection clipboard -o)" ', mode='caret')
config.bind('u', 'scroll-page 0 -0.4', mode='caret')

# Bindings for command mode
config.bind('<Alt+c>', 'fake-key <Ctrl+c>', mode='command')
config.bind('<Alt+m>', 'fake-key <Home>', mode='command')
config.bind('<Alt+v>', 'fake-key <Ctrl+v>', mode='command')
config.bind('<Ctrl+->', 'zoom-out', mode='command')
config.bind('<Ctrl+=>', 'zoom-in', mode='command')
config.bind('<Ctrl+n>', ':completion-item-focus next', mode='command')
config.bind('<Ctrl+p>', ':completion-item-focus prev', mode='command')
config.bind('<Escape>', 'mode-leave', mode='command')

# Bindings for insert mode

## Globs
config.bind('<Escape>', 'mode-leave', mode='insert')
config.bind('<Ctrl+->', 'zoom-out', mode='insert')
config.bind('<Ctrl+=>', 'zoom-in', mode='insert')
config.bind('<Ctrl+Shift+e>', 'scroll-page 0 -0.4', mode='insert')
config.bind('<Ctrl+Shift+y>', 'scroll-page 0 0.4', mode='insert')

## inserts
config.bind('<Alt+Shift+p>', 'insert-text {primary}', mode='insert')
config.bind('<Tab>', 'fake-key <space>;;fake-key <space>;;fake-key <space>;;fake-key <space>', mode='insert')
config.bind('<Ctrl+Alt+Space>', 'fake-key <Home>;;fake-key <Shift+End>;;fake-key <Ctrl+c>;;fake-key <End>;;fake-key <Return>;;fake-key <Ctrl+v>', mode='insert') # duplicate-line

## open-line
config.bind('<Ctrl+o>', 'fake-key <Return>;;fake-key <Up>;;fake-key <End>', mode='insert')
config.bind('<Alt+o>', 'fake-key <Home>;;fake-key <Return>;;fake-key <Up>', mode='insert')
config.bind('<Alt+Shift+o>', 'fake-key <End>;;fake-key <Return>', mode='insert')

## navigation
config.bind('<Ctrl+a>', 'fake-key <Home>', mode='insert')      # move-to-beginning-of-line
config.bind('<Ctrl+e>', 'fake-key <End>', mode='insert')       # end-of-line
config.bind('<Ctrl+f>', 'fake-key <Right>', mode='insert')     # forward-char
config.bind('<Ctrl+b>', 'fake-key <Left>', mode='insert')      # backward-char
config.bind('<Ctrl+n>', 'fake-key <Down>', mode='insert')      # forward-line
config.bind('<Ctrl+p>', 'fake-key <Up>', mode='insert')        # previous-line
config.bind('<Ctrl+d>', 'fake-key <Delete>', mode='insert')    # delete-char
config.bind('<Ctrl+h>', 'fake-key <Backspace>', mode='insert') # backward-delete-char
config.bind('<Alt+b>', 'fake-key <Ctrl+Left>', mode='insert')  # backward-word
config.bind('<Alt+f>', 'fake-key <Ctrl+Right>', mode='insert') # forward-word

config.bind('<Alt+a>', 'fake-key <Ctrl+Home>', mode='insert') # move-to-text-start
config.bind('<Alt+e>', 'fake-key <Ctrl+End>', mode='insert')  # move-to-end-of-text
config.bind('<Alt+i>', 'fake-key <Home>;;fake-key <Ctrl+Right>;;fake-key <Ctrl+Left>', mode='insert') # back-to-indentation

config.bind('<Alt+c>', 'fake-key <Ctrl+c>', mode='insert')  # copy (st)
config.bind('<Alt+v>', 'fake-key <Ctrl+v>', mode='insert')  # paste (st)
config.bind('<Ctrl+y>', 'fake-key <Ctrl+v>', mode='insert') # yank
config.bind('<Alt+w>', 'fake-key <Ctrl+c>', mode='insert')  # kill-ring-save
config.bind('<Alt+y>', 'fake-key <Home>;;fake-key <Shift+End>;;fake-key <Ctrl+c>;;fake-key <End>', mode='insert') # copy-whole-line

config.bind('<Ctrl+Alt+k>', 'fake-key <Shift+End>;;fake-key <Ctrl+x>', mode='insert') # kill-end-of-line
config.bind('<Ctrl+Alt+w>', 'fake-key <Ctrl+Home>;;fake-key <Shift+End>;;fake-key <Ctrl+c>', mode='insert') # copy-whole-text
config.bind('<Ctrl+Alt+m>', 'fake-key <Shift+End>;;fake-key <Ctrl+c>', mode='insert') # copy-forward-line
config.bind('<Ctrl+Alt+p>', 'fake-key <Shift+Home>;;fake-key <Ctrl+c>', mode='insert') # copy-previous-line

## selection
config.bind('<Ctrl+Shift+f>', 'fake-key <Shift+Right>', mode='insert')     # mark-forward-char
config.bind('<Ctrl+Shift+b>', 'fake-key <Shift+Left>', mode='insert')      # mark-backward-char
config.bind('<Ctrl+Shift+a>', 'fake-key <Shift+Home>', mode='insert')      # mark-beginning-of-line
config.bind('<Ctrl+Shift+e>', 'fake-key <Shift+End>', mode='insert')       # mark-end-of-line

config.bind('<Alt+Shift+f>', 'fake-key <Ctrl+Shift+Right>', mode='insert') # mark-forward-word
config.bind('<Alt+Shift+b>', 'fake-key <Ctrl+Shift+Left>', mode='insert')  # mark-backward-word
config.bind('<Alt+Shift+a>', 'fake-key <Ctrl+Shift+Home>', mode='insert')  # mark-to-beginning-of-text
config.bind('<Alt+Shift+e>', 'fake-key <Ctrl+Shift+End>', mode='insert')   # mark-end-of-text
config.bind('<Alt+Shift+h>', 'fake-key <Shift+Home>', mode='insert')       # mark-beginning-of-line
config.bind('<Ctrl+l>', 'fake-key <Shift+End>', mode='insert')             # mark-end-of-line
config.bind('<Ctrl+Shift+l>', 'fake-key <Shift+End>;;fake-key <Ctrl+x>', mode='insert') # kill-end-of-line

config.bind('<Alt+Shift+@>', 'fake-key <Ctrl+Shift+Right>', mode='insert')                    # mark-word
config.bind('<Ctrl+\'>', 'fake-key <Ctrl+Shift+Right>', mode='insert')                        # mark-word
config.bind('<Ctrl+;>', 'fake-key <Ctrl+Shift+Left>', mode='insert')                          # mark-backward-word
config.bind('<Alt+Space>', 'fake-key <Home>;;fake-key <Ctrl+Shift+End>', mode='insert')       # mark-whole-line
config.bind('<Ctrl+Space>', 'fake-key <Ctrl+Shift+Right>', mode='insert')                     # mark-word
config.bind('<Ctrl+Shift+Space>', 'fake-key <Ctrl+Shift+Left>', mode='insert')                # mark-previous-word

config.bind('<Ctrl+Alt+Shift+a>', 'fake-key <Ctrl+a>', mode='insert') # select all
config.bind('<Ctrl+Alt+a>', 'fake-key <Ctrl+a>', mode='insert')       # select-all

config.bind('<Ctrl+Shift+n>', 'fake-key <Shift+Down>', mode='insert') # mark-forward-line
config.bind('<Ctrl+Shift+p>', 'fake-key <Shift+Up>', mode='insert')   # mark-previous-line
config.bind('<Ctrl+Shift+j>', 'fake-key <Shift+Down>', mode='insert') # mark-forward-line
config.bind('<Ctrl+Shift+k>', 'fake-key <Shift+Up>', mode='insert')   # mark-previous-line

## deletion
config.bind('<Ctrl+k>', 'fake-key <Shift+End>;;fake-key <Ctrl+c>;;fake-key <Delete>', mode='insert') # kill-line
config.bind('<Ctrl+w>', 'fake-key <Ctrl+c>;;fake-key <Ctrl+Backspace>', mode='insert')        # kill-backward-word
config.bind('<Ctrl+u>', 'fake-key <Shift+Home>;;fake-key <Ctrl+x>', mode='insert')            # unix-rubout
config.bind('<Alt+u>', 'fake-key <Ctrl+Shift+Home>;;fake-key <Ctrl+x>', mode='insert')        # kill-to-beginning-of-text
config.bind('<Ctrl+Alt+k>', 'fake-key <Ctrl+Shift+End>;;fake-key <Ctrl+x>', mode='insert')    # kill-to-end-of-text
config.bind('<Ctrl+Shift+h>', 'fake-key <Ctrl+Shift+Left>;;fake-key <Ctrl+c>', mode='insert') # copy-backward-word
config.bind('<Alt+d>', 'fake-key <Ctrl+Right>;;fake-key <Ctrl+Shift+Left>;;fake-key <Ctrl+x>', mode='insert') # kill-word

## Control Chars
config.bind('<Ctrl+i>', 'fake-key <Tab>', mode='insert')
config.bind('<Ctrl+Alt+i>', 'fake-key <Backtab>', mode='insert')
config.bind('<Ctrl+Return>', 'fake-key <Ctrl+Return>', mode='insert')
config.bind('<Ctrl+m>', 'fake-key <Ctrl+Return>', mode='insert')
config.bind('<Ctrl+j>', 'fake-key <Shift+Return>', mode='insert')

# Bindings for passthrough mode

## Globs
config.bind('<Escape>', 'mode-leave', mode='passthrough')
config.bind('<Ctrl+->', 'zoom-out', mode='passthrough')
config.bind('<Ctrl+=>', 'zoom-in', mode='passthrough')
config.bind('<Ctrl+Shift+e>', 'scroll-page 0 -0.4', mode='passthrough')
config.bind('<Ctrl+Shift+y>', 'scroll-page 0 0.4', mode='passthrough')

## inserts
config.bind('<Alt+Shift+p>', 'insert-text {primary}', mode='passthrough')
config.bind('<Tab>', 'fake-key <space>;;fake-key <space>;;fake-key <space>;;fake-key <space>', mode='passthrough')
config.bind('<Ctrl+Alt+Space>', 'fake-key <Home>;;fake-key <Ctrl+Shift+End>;;fake-key <Ctrl+c>;;fake-key <End>;;fake-key <Return>;;fake-key <Ctrl+v>', mode='passthrough') # duplicate-line

## open-line
config.bind('<Ctrl+o>', 'fake-key <Return>;;fake-key <Up>;;fake-key <End>', mode='passthrough')
config.bind('<Alt+o>', 'fake-key <Home>;;fake-key <Return>;;fake-key <Up>', mode='passthrough')
config.bind('<Alt+Shift+o>', 'fake-key <End>;;fake-key <Return>', mode='passthrough')

## navigation
config.bind('<Ctrl+a>', 'fake-key <Home>', mode='passthrough')      # move-to-beginning-of-line
config.bind('<Ctrl+e>', 'fake-key <End>', mode='passthrough')       # end-of-line
config.bind('<Ctrl+f>', 'fake-key <Right>', mode='passthrough')     # forward-char
config.bind('<Ctrl+b>', 'fake-key <Left>', mode='passthrough')      # backward-char
config.bind('<Ctrl+n>', 'fake-key <Down>', mode='passthrough')      # forward-line
config.bind('<Ctrl+p>', 'fake-key <Up>', mode='passthrough')        # previous-line
config.bind('<Ctrl+d>', 'fake-key <Delete>', mode='passthrough')    # delete-char
config.bind('<Ctrl+h>', 'fake-key <Backspace>', mode='passthrough') # backward-delete-char
config.bind('<Alt+b>', 'fake-key <Ctrl+Left>', mode='passthrough')  # backward-word
config.bind('<Alt+f>', 'fake-key <Ctrl+Right>', mode='passthrough') # forward-word

config.bind('<Alt+a>', 'fake-key <Ctrl+Home>', mode='passthrough') # move-to-text-start
config.bind('<Alt+e>', 'fake-key <Ctrl+End>', mode='passthrough')  # move-to-end-of-text
config.bind('<Alt+i>', 'fake-key <Home>;;fake-key <Ctrl+Right>;;fake-key <Ctrl+Left>', mode='passthrough') # back-to-indentation

config.bind('<Alt+c>', 'fake-key <Ctrl+c>', mode='passthrough')  # copy (st)
config.bind('<Alt+v>', 'fake-key <Ctrl+v>', mode='passthrough')  # paste (st)
config.bind('<Ctrl+y>', 'fake-key <Ctrl+v>', mode='passthrough') # yank
config.bind('<Alt+w>', 'fake-key <Ctrl+c>', mode='passthrough')  # kill-ring-save
config.bind('<Alt+y>', 'fake-key <Home>;;fake-key <Shift+End>;;fake-key <Ctrl+c>;;fake-key <End>', mode='passthrough') # copy-whole-line

config.bind('<Ctrl+Alt+k>', 'fake-key <Shift+End>;;fake-key <Ctrl+x>', mode='passthrough') # kill-end-of-line
config.bind('<Ctrl+Alt+w>', 'fake-key <Ctrl+Home>;;fake-key <Shift+End>;;fake-key <Ctrl+c>', mode='passthrough')
config.bind('<Ctrl+Alt+m>', 'fake-key <Shift+End>;;fake-key <Ctrl+c>', mode='passthrough') # copy-forward-line
config.bind('<Ctrl+Alt+p>', 'fake-key <Shift+Home>;;fake-key <Ctrl+c>', mode='passthrough') # copy-previous-line

## selection
config.bind('<Ctrl+Shift+f>', 'fake-key <Shift+Right>', mode='passthrough')     # mark-forward-char
config.bind('<Ctrl+Shift+b>', 'fake-key <Shift+Left>', mode='passthrough')      # mark-backward-char
config.bind('<Ctrl+Shift+a>', 'fake-key <Shift+Home>', mode='passthrough')      # mark-beginning-of-line
config.bind('<Ctrl+Shift+e>', 'fake-key <Shift+End>', mode='passthrough')       # mark-end-of-line

config.bind('<Alt+Shift+f>', 'fake-key <Ctrl+Shift+Right>', mode='passthrough') # mark-forward-word
config.bind('<Alt+Shift+b>', 'fake-key <Ctrl+Shift+Left>', mode='passthrough')  # mark-backward-word
config.bind('<Alt+Shift+a>', 'fake-key <Ctrl+Shift+Home>', mode='passthrough')  # mark-to-beginning-of-text
config.bind('<Alt+Shift+e>', 'fake-key <Ctrl+Shift+End>', mode='passthrough')   # mark-end-of-text
config.bind('<Alt+Shift+h>', 'fake-key <Shift+Home>', mode='passthrough')       # mark-beginning-of-line
config.bind('<Ctrl+l>', 'fake-key <Shift+End>', mode='passthrough')             # mark-end-of-line
config.bind('<Ctrl+Shift+l>', 'fake-key <Shift+End>;;fake-key <Ctrl+x>', mode='passthrough') # kill-end-of-line

config.bind('<Alt+Shift+@>', 'fake-key <Ctrl+Shift+Right>', mode='passthrough')               # mark-word
config.bind('<Ctrl+\'>', 'fake-key <Ctrl+Shift+Right>', mode='passthrough')                   # mark-word
config.bind('<Ctrl+;>', 'fake-key <Ctrl+Shift+Left>', mode='passthrough')                     # mark-backward-word
config.bind('<Alt+Space>', 'fake-key <Home>;;fake-key <Ctrl+Shift+End>', mode='passthrough')  # mark-whole-line
config.bind('<Ctrl+Space>', 'fake-key <Ctrl+Shift+Right>', mode='passthrough')                # mark-word
config.bind('<Ctrl+Shift+Space>', 'fake-key <Ctrl+Shift+Left>', mode='passthrough')           # mark-previous-word

config.bind('<Ctrl+Alt+Shift+a>', 'fake-key <Ctrl+a>', mode='passthrough') # select all
config.bind('<Ctrl+Alt+a>', 'fake-key <Ctrl+a>', mode='passthrough')       # select-all

config.bind('<Ctrl+Shift+n>', 'fake-key <Shift+Down>', mode='passthrough') # mark-forward-line
config.bind('<Ctrl+Shift+p>', 'fake-key <Shift+Up>', mode='passthrough')   # mark-previous-line
config.bind('<Ctrl+Shift+j>', 'fake-key <Shift+Down>', mode='passthrough') # mark-forward-line
config.bind('<Ctrl+Shift+k>', 'fake-key <Shift+Up>', mode='passthrough')   # mark-previous-line

## deletion
config.bind('<Ctrl+k>', 'fake-key <Shift+End>;;fake-key <Ctrl+c>;;fake-key <Delete>', mode='passthrough') # kill-line
config.bind('<Ctrl+w>', 'fake-key <Ctrl+c>;;fake-key <Ctrl+Backspace>', mode='passthrough')        # kill-backward-word
config.bind('<Ctrl+u>', 'fake-key <Shift+Home>;;fake-key <Ctrl+x>', mode='passthrough')            # unix-rubout
config.bind('<Alt+u>', 'fake-key <Ctrl+Shift+Home>;;fake-key <Ctrl+x>', mode='passthrough')        # kill-to-beginning-of-text
config.bind('<Ctrl+Alt+k>', 'fake-key <Ctrl+Shift+End>;;fake-key <Ctrl+x>', mode='passthrough')    # kill-to-end-of-text
config.bind('<Ctrl+Shift+h>', 'fake-key <Ctrl+Shift+Left>;;fake-key <Ctrl+c>', mode='passthrough') # copy-backward-word
config.bind('<Alt+d>', 'fake-key <Ctrl+Right>;;fake-key <Ctrl+Shift+Left>;;fake-key <Ctrl+x>', mode='passthrough') # kill-word

## Control Chars
config.bind('<Ctrl+i>', 'fake-key <Tab>', mode='passthrough')
config.bind('<Ctrl+Alt+i>', 'fake-key <Backtab>', mode='passthrough')
config.bind('<Ctrl+Return>', 'fake-key <Ctrl+Return>', mode='passthrough')
config.bind('<Ctrl+m>', 'fake-key <Ctrl+Return>', mode='passthrough')
config.bind('<Ctrl+j>', 'fake-key <Shift+Return>', mode='passthrough')

# Bindings for prompt mode
config.bind('<Escape>', 'mode-leave', mode='prompt')
config.bind('<Ctrl+y>', 'prompt-accept', mode='prompt')
config.bind('<Ctrl+w>', 'rl-filename-rubout', mode='command')

# testing Alt+Return availability
config.bind('<Alt+Return>', 'fake-key <Ctrl+Return>', mode='passthrough')
config.bind('<Alt+Return>', 'fake-key <Ctrl+Return>', mode='insert')
config.bind('<Alt+Return>', 'fake-key <Ctrl+Return>', mode='command')
config.bind('<Alt+c>', 'yank {selection}', mode='insert')
config.bind('<Alt+c>', 'yank {selection}', mode='passthrough')
config.bind('<Alt+p>', 'insert-text {primary}', mode='insert')
config.bind('<Alt+p>', 'insert-text {primary}', mode='passthrough')

# readline bindings in command mode
config.bind('<Ctrl+b>', 'rl-backward-char', mode='command')
config.bind('<Ctrl+h>', 'rl-backward-delete-char', mode='command')
config.bind('<Alt+b>', 'rl-backward-word', mode='command')
config.bind('<Ctrl+a>', 'rl-beginning-of-line', mode='command')
config.bind('<Ctrl+h>', 'rl-delete-char', mode='command')
config.bind('<Ctrl+e>', 'rl-end-of-line', mode='command')
config.bind('<Ctrl+f>', 'rl-forward-char', mode='command')
config.bind('<Alt+Backspace>', 'rl-backward-kill-word', mode='command')
config.bind('<Alt+f>', 'rl-forward-word', mode='command')
config.bind('<Alt+p>', 'insert-text {primary}', mode='command')
config.bind('<Ctrl+k>', 'rl-kill-line', mode='command')
config.bind('<Alt+d>', 'rl-kill-word', mode='command')
config.bind('<Ctrl+u>', 'rl-rubout', mode='command')
config.bind('<Ctrl+U>', 'rl-unix-line-discard', mode='command')
config.bind('<Ctrl+y>', 'rl-yank', mode='command')

# readline bindidngs in prompt mode
config.bind('<Ctrl+b>', 'rl-backward-char', mode='prompt')
config.bind('<Ctrl+h>', 'rl-backward-delete-char', mode='prompt')
config.bind('<Alt+b>', 'rl-backward-word', mode='prompt')
config.bind('<Ctrl+a>', 'rl-beginning-of-line', mode='prompt')
config.bind('<Ctrl+h>', 'rl-delete-char', mode='prompt')
config.bind('<Ctrl+e>', 'rl-end-of-line', mode='prompt')
config.bind('<Ctrl+f>', 'rl-forward-char', mode='prompt')
config.bind('<Alt+Backspace>', 'rl-backward-kill-word', mode='prompt')
config.bind('<Alt+f>', 'rl-forward-word', mode='prompt')
config.bind('<Alt+p>', 'insert-text {primary}', mode='prompt')
config.bind('<Ctrl+k>', 'rl-kill-line', mode='prompt')
config.bind('<Alt+d>', 'rl-kill-word', mode='prompt')
config.bind('<Ctrl+u>', 'rl-rubout', mode='prompt')
config.bind('<Ctrl+U>', 'rl-unix-line-discard', mode='prompt')
config.bind('<Ctrl+y>', 'rl-yank', mode='prompt')
